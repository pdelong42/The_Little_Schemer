(load "common.scheme")

(define insertL
   (lambda
      (new old lat)
      (cond
         (  (null? lat)
            (quote ())
         )
         (  (eq? old (car lat))
            (cons new lat)
         )
         (else
            (cons
               (car lat)
               (insertL new old (cdr lat))
            )
         )
      )
   )
)

(insertL 'topping 'fudge '(ice cream with fudge for desert))

(insertL 'jalape√o 'and '(tacos tamales and salsa))

(define insertL*
   (lambda
      (new old l)
      (cond
         (  (null? l)
            (quote ())
         )
         (  (notpair? l) l)
         (  (eq? old (car l))
            (cons
               new
               (cons
                  (insertL* new old (car l))
                  (insertL* new old (cdr l))
               )
            )
         )
         (else
            (cons
               (insertL* new old (car l))
               (insertL* new old (cdr l))
            )
         )
      )
   )
)

(insertL* 'pecker 'chuck '((how much (wood)) could ((a (wood) chuck)) (((chuck))) (if (a) ((wood chuck))) could chuck wood))

(define insertL-f
   (lambda
      (test?)
      (lambda
         (new old lat)
         (cond
            (  (null? lat)
               (quote ())
            )
            (  (test? old (car lat))
               (cons new lat)
            )
            (else
               (cons
                  (car lat)
                  ((insertL-f test?) new old (cdr lat))
               )
            )
         )
      )
   )
)

(define insertL-eq? (insertL-f eq?))

(insertL-eq? 'topping 'fudge '(ice cream with fudge for desert))

(insertL-eq? 'jalape√o 'and '(tacos tamales and salsa))

;((insertL-f equal?) 'pecker 'chuck '((how much (wood)) could ((a (wood) chuck)) (((chuck))) (if (a) ((wood chuck))) could chuck wood))
