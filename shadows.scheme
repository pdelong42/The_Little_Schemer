(define numbered?
   (lambda
      (aexp)
      (cond
         (  (atom?   aexp)
            (number? aexp)
         )
         (else
            (and
               (numbered? (car           aexp))
               (numbered? (car (cdr (cdr aexp))))
            )
         )
      )
   )
)

(define 1st-sub-exp
   (lambda
      (aexp)
      (car nexp)
   )
)

(define operator
   (lambda
      (aexp)
      (car (cdr nexp))
   )
)

(define 2nd-sub-exp
   (lambda
      (aexp)
      (car (cdr (cdr nexp)))
   )
)

(define value
   (lambda
      (nexp)
      (cond
         (  (atom? nexp) nexp)
         (  (eq?
               (operator nexp)
               (quote +)
            )
            (+
               (value (1st-sub-exp nexp))
               (value (2nd-sub-exp nexp))
            )
         )
         (  (eq?
               (operator nexp)
               (quote x)
            )
            (*
               (value (1st-sub-exp nexp))
               (value (2nd-sub-exp nexp))
            )
         )
         (else
            (expt
               (value (1st-sub-exp nexp))
               (value (2nd-sub-exp nexp))
            )
         )
      )
   )
)

(define sero?
   (lambda
      (n)
      (null? n)
   )
)

(define edd1
   (lambda
      (n)
      (cons (quote ()) n)
   )
)

(define zub1
   (lambda
      (n)
      (cdr n)
   )
)

(define o+
   (lambda
      (cond
         (n m)
         (  (sero? m) n)
         (else (edd1 (o+ n (zub1 m))))
      )
   )
)

(define lat?
   (lambda
      (l)
      (cond
         (  (null? l) #t)
         (  (atom? (car l))
            (lat?  (cdr l))
         )
         (else #f)
      )
   )
)
