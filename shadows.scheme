(load "common.scheme")

(define numbered?
   (lambda
      (aexp)
      (cond
         (  (atom?   aexp)
            (number? aexp)
         )
         (else
            (and
               (numbered? (car           aexp))
               (numbered? (car (cdr (cdr aexp))))
            )
         )
      )
   )
)

(numbered? '1)

(numbered? '(3 + (4 ^ 5)))

(numbered? '(2 x sausage))

(define 1st-sub-exp
   (lambda
      (aexp)
      (car aexp)
   )
)

(define operator
   (lambda
      (aexp)
      (car (cdr aexp))
   )
)

(define 2nd-sub-exp
   (lambda
      (aexp)
      (car (cdr (cdr aexp)))
   )
)

(define atom-to-function
   (lambda
      (x)
      (cond
         (  (eq? x (quote +)) +)
         (  (eq? x (quote x)) *)
         (else expt)
      )
   )
)

(atom-to-function (operator '(+ 5 3)))

(define value
   (lambda
      (nexp)
      (cond
         (  (atom? nexp) nexp)
         (else
            (  (atom-to-function (operator nexp))
               (value (1st-sub-exp nexp))
               (value (2nd-sub-exp nexp))
            )
         )
      )
   )
)

(value '13)

(value '(1 + 3))

(value '(1 + (3 ^ 4)))

(value 'cookie)

(value '(1 + (3 x 4)))

(define sero?
   (lambda
      (n)
      (null? n)
   )
)

(define edd1
   (lambda
      (n)
      (cons (quote ()) n)
   )
)

(define zub1
   (lambda
      (n)
      (cdr n)
   )
)

(define o+
   (lambda
      (n m)
      (cond
         (  (sero? m) n)
         (else (edd1 (o+ n (zub1 m))))
      )
   )
)

(define lat?
   (lambda
      (l)
      (cond
         (  (null? l) #t)
         (  (atom? (car l))
            (lat?  (cdr l))
         )
         (else #f)
      )
   )
)
