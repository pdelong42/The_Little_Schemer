(define notpair? (lambda (x) (not (pair? x))))

(define notatom?
   (lambda
      (x)
      (or
         (pair? x)
         (null? x)
      )
   )
)

(define    atom?    (lambda (x) (not (notatom? x))))

(define notatom?car (lambda (x) (notatom? (car x))))

(define add1
   (lambda
      (n)
      (+ n 1)
   )
)

(define sub1
   (lambda
      (n)
      (- n 1)
   )
)

(define lt
   (lambda
      (a b)
      (cond
         (  (zero? b) #f)
         (  (zero? a) #t)
         (else
            (lt
               (sub1 a)
               (sub1 b)
            )
         )
      )
   )
)

(define gt
   (lambda
      (a b)
      (cond
         (  (zero? a) #f)
         (  (zero? b) #t)
         (else
            (gt
               (sub1 a)
               (sub1 b)
            )
         )
      )
   )
)

(define eq
   (lambda
      (a b)
      (cond
         (  (lt a b) #f)
         (  (gt a b) #f)
         (else #t)
      )
   )
)

(define eqan?
   (lambda
      (a b)
      (cond
         (  (and
               (number? a)
               (number? b)
            )
            (eq a b)
         )
         (  (or
               (number? a)
               (number? b)
            )
            #f
         )
         (else (eq? a b))
      )
   )
)

(define eqlist?
   (lambda
      (a b)
      (cond
         (  (and
               (null? a)
               (null? b)
            )
            #t
         )
         (  (or
               (null? a)
               (null? b)
            )
            #f
         )
         (else
            (and
               (equal?
                  (car a)
                  (car b)
               )
               (eqlist?
                  (cdr a)
                  (cdr b)
               )
            )
         )
      )
   )
)

(define equal?
   (lambda
      (a b)
      (cond
         (  (and
               (pair? a)
               (pair? b)
            )
            (eqlist? a b)
         )
         (  (or
               (pair? a)
               (pair? b)
            )
            #f
         )
         (else (eqan? a b))
      )
   )
)

(define member?
   (lambda
      (a lat)
      (cond
         (  (null? lat) #f)
         (else
            (or
               (equal?  a (car lat))
               (member? a (cdr lat))
            )
         )
      )
   )
)

(define multirember-f
   (lambda
      (test?)
      (lambda
         (a lat)
         (cond
            (  (null? lat)
               (quote ())
            )
            (  (test? a (car lat))
               ((multirember-f test?) a (cdr lat))
            )
            (else
               (cons
                  (car lat)
                  ((multirember-f test?) a (cdr lat))
               )
            )
         )
      )
   )
)

(define multiremberT
   (lambda
      (test? lat)
      (cond
         (  (null? lat)
            (quote ())
         )
         (  (test? (car lat))
            (multiremberT test? (cdr lat))
         )
         (else
            (cons
               (car lat)
               (multiremberT test? (cdr lat))
            )
         )
      )
   )
)

(define multirember (multirember-f equal?))

(define multirember-eq? (multirember-f eq?))

(define eq?-c
   (lambda
      (a)
      (lambda
         (x)
         (eq? x a)
      )
   )
)

(define firsts
   (lambda
      (lst)
      (cond
         (  (null? lst)
            (quote ())
         )
         (else
            (cons
               (car    (car lst))
               (firsts (cdr lst))
            )
         )
      )
   )
)

(define multirember&co
   (lambda
      (a lat col)
      (cond
         (  (null? lat)
            (col
               (quote ())
               (quote ())
            )
         )
         (  (eq? (car lat) a)
            (multirember&co
               a
               (cdr lat)
               (lambda
                  (newlat seen)
                  (col newlat (cons (car lat) seen))
               )
            )
         )
         (else
            (multirember&co
               a
               (cdr lat)
               (lambda
                  (newlat seen)
                  (col (cons (car lat) newlat) seen)
               )
            )
         )
      )
   )
)

(define a-friend
   (lambda
      (x y)
      (null? y)
   )
)

(multirember&co 'tuna '() a-friend)

(define new-friend
   (lambda
      (newlat seen)
      (col newlat (cons (car lat) seen))
   )
)

(multirember&co 'tuna '(tuna) a-friend)

(define latest-friend
   (lambda
      (newlat seen)
      (col (cons (car lat) newlat) seen)
   )
)

(multirember&co 'tuna '(and tuna) a-friend)
;(multirember&co 'tuna '(tuna) latest-friend)
;(multirember&co 'tuna '() new-friend)
;(latest-friend '() '(tuna))
