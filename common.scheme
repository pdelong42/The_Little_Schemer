(define notpair? (lambda (x) (not (pair? x))))

(define notatom?
   (lambda
      (x)
      (or
         (pair? x)
         (null? x)
      )
   )
)

(define    atom?    (lambda (x) (not (notatom? x))))

(define notatom?car (lambda (x) (notatom? (car x))))

(define eqan?
   (lambda
      (a b)
      (cond
         (  (and
               (number? a)
               (number? b)
            )
            (eq a b)
         )
         (  (or
               (number? a)
               (number? b)
            )
            #f
         )
         (else (eq? a b))
      )
   )
)

(define equal?
   (lambda
      (a b)
      (cond
         (  (eqan? a b) #t)
         (else (eqlist? a b))
      )
   )
)
