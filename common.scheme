(define notpair? (lambda (x) (not (pair? x))))

(define notatom?
   (lambda
      (x)
      (or
         (pair? x)
         (null? x)
      )
   )
)

(define    atom?    (lambda (x) (not (notatom? x))))

(define notatom?car (lambda (x) (notatom? (car x))))

; this references 'eq', which isn't defined anywhere that's referenced from
; here (it's in peano.scheme, but that isn't loaded here); the only reason it
; doesn't fail in eqlist.scheme is due to lazy evaluation - there are no
; numbers in those test cases;

(define eqan?
   (lambda
      (a b)
      (cond
         (  (and
               (number? a)
               (number? b)
            )
            (eq a b)
         )
         (  (or
               (number? a)
               (number? b)
            )
            #f
         )
         (else (eq? a b))
      )
   )
)

(define equal?
   (lambda
      (a b)
      (cond
         (  (and
               (pair? a)
               (pair? b)
            )
            (eqlist? a b)
         )
         (  (or
               (pair? a)
               (pair? b)
            )
            #f
         )
         (else (eqan? a b))
      )
   )
)

; an optimized version, pending testing
;
;(define equal?
;   (lambda
;      (a b)
;      (cond
;         (  (eqan? a b) #t)
;         (else (eqlist? a b))
;      )
;   )
;)
