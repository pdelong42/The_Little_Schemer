(load "common.scheme")

(define insert-g
   (lambda
      (seq)
      (lambda
         (new old lat)
         (cond
            (  (null? lat)
               (quote ())
            )
            (  (eq?     old (car lat))
               (seq new old (cdr lat))
            )
            (else
               (cons
                  (car lat)
                  ((insert-g seq) new old (cdr lat))
               )
            )
         )
      )
   )
)

(define insertL
   (insert-g
      (lambda
         (new old l)
         (cons new (cons old l))
      )
   )
)

(define insertR
   (insert-g
      (lambda
         (new old l)
         (cons old (cons new l))
      )
   )
)

(define subst
   (insert-g
      (lambda
         (new  old l)
         (cons new l)
      )
   )
)

(define rember
   (lambda
      (a l)
      ((insert-g (lambda (new old l) l)) #f a l)
   )
)

(insertL 'topping 'fudge '(ice cream with fudge for desert))

(insertR 'topping 'fudge '(ice cream with fudge for desert))

(insertL 'jalape√o 'and '(tacos tamales and salsa))

(insertR 'jalape√o 'and '(tacos tamales and salsa))

(subst 'topping 'fudge '(ice cream with fudge for desert))

(subst 'jalape√o 'and '(tacos tamales and salsa))

(rember 'sausage '(pizza with sausage and bacon))
