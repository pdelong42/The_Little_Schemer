(define add1
   (lambda
      (n)
      (+ n 1)
   )
)

(add1 67)

(define sub1
   (lambda
      (n)
      (- n 1)
   )
)

(sub1 5)

(define o+
   (lambda
      (a b)
      (cond
         (  (zero? b) a)
         (else (add1 (o+ a (sub1 b))))
      )
   )
)

(o+ 46 12)

(define o-
   (lambda
      (a b)
      (cond
         (  (zero? b) a)
         (else (sub1 (o- a (sub1 b))))
      )
   )
)

(o- 14 3)

(o- 17 9)

(define addtup
   (lambda
      (tup)
      (cond
         (  (null? tup) 0)
         (else
            (o+
               (car tup)
               (addtup (cdr tup))
            )
         )
      )
   )
)

(addtup '(3 5 2 8))

(addtup '(15 6 7 12 3))

(define o*
   (lambda
      (a b)
      (cond
         (  (zero? b) 0)
         (else (o+ a (o* a (sub1 b))))
      )
   )
)

(o* 5 3)

(o* 13 4)

(define tup+
   (lambda
      (tup1 tup2)
      (cond
         (  (and
               (null? tup1)
               (null? tup2)
            )
            (quote ())
         )
         (else
            (cons
               (o+
                  (car tup1)
                  (car tup2)
               )
               (tup+
                  (cdr tup1)
                  (cdr tup2)
               )
            )
         )
      )
   )
)

(tup+
   '(3 6 9 11 4)
   '(8 5 2  0 7)
)

(tup+
   '(2 3)
   '(4 6)
)
