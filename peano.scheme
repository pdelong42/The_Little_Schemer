(define add1
   (lambda
      (n)
      (+ n 1)
   )
)

(add1 67)

(define sub1
   (lambda
      (n)
      (- n 1)
   )
)

(sub1 5)

(define o+
   (lambda
      (a b)
      (cond
         (  (zero? b) a)
         (else (add1 (o+ a (sub1 b))))
      )
   )
)

(o+ 46 12)

(define o-
   (lambda
      (a b)
      (cond
         (  (zero? b) a)
         (else (sub1 (o- a (sub1 b))))
      )
   )
)

(o- 14 3)

(o- 17 9)

(define addtup
   (lambda
      (tup)
      (cond
         (  (null? tup) 0)
         (else
            (o+
               (car tup)
               (addtup (cdr tup))
            )
         )
      )
   )
)

(addtup '(3 5 2 8))

(addtup '(15 6 7 12 3))

(define o*
   (lambda
      (a b)
      (cond
         (  (zero? b) 0)
         (else (o+ a (o* a (sub1 b))))
      )
   )
)

(o* 5 3)

(o* 13 4)

(define tup+
   (lambda
      (tup1 tup2)
      (cond
         (  (null? tup1) tup2)
         (  (null? tup2) tup1)
         (else
            (cons
               (o+
                  (car tup1)
                  (car tup2)
               )
               (tup+
                  (cdr tup1)
                  (cdr tup2)
               )
            )
         )
      )
   )
)

(tup+
   '(3 6 9 11 4)
   '(8 5 2  0 7)
)

(tup+
   '(2 3)
   '(4 6)
)

(tup+
   '(3 7)
   '(4 6)
)

(tup+
   '(3 7)
   '(4 6 8 1)
)

(define gt
   (lambda
      (a b)
      (cond
         (  (zero? a) #f)
         (  (zero? b) #t)
         (else
            (gt
               (sub1 a)
               (sub1 b)
            )
         )
      )
   )
)

(gt 12 133)

(gt 120 11)

(gt 3 3)

(define lt
   (lambda
      (a b)
      (cond
         (  (zero? b) #f)
         (  (zero? a) #t)
         (else
            (lt
               (sub1 a)
               (sub1 b)
            )
         )
      )
   )
)

(lt 4 6)

(lt 8 3)

(lt 6 6)

(define eq
   (lambda
      (a b)
      (cond
         (  (lt a b) #f)
         (  (gt a b) #f)
         (else #t)
      )
   )
)

(eq 12 133)

(eq 120 11)

(eq 3 3)

(eq 4 6)

(eq 8 3)

(eq 6 6)

(define power
   (lambda
      (a b)
      (cond
         (  (zero? b) 1)
         (else (o* a (power a (sub1 b))))
      )
   )
)

(power 1 1)

(power 2 3)

(power 5 3)

(define divide
   (lambda
      (a b)
      (cond
         (  (lt a b) 0)
         (else (add1 (divide (- a b) b)))
      )
   )
)

(divide 15 4)

(define _length
   (lambda
      (lat)
      (cond
         (  (null? lat) 0)
         (else (add1 (_length (cdr lat))))
      )
   )
)

(_length '(hotdogs with mustard sauerkraut and pickles))

(_length '(ham and cheese on rye))

(define pick
   (lambda
      (n lat)
      (cond
         (  (null? lat)
            (quote ())
         )
         (  (zero? (sub1 n))
            (car lat)
         )
         (else
            (pick
               (sub1 n)
               (cdr lat)
            )
         )
      )
   )
)

(pick 4 '(lasagna spaghetti ravioli macaroni meatball))

(pick 0 '(a))

(define rempick
   (lambda
      (n lat)
      (cond
         (  (null? lat)
            (quote ())
         )
         (  (zero? (sub1 n))
            (cdr lat)
         )
         (else
            (cons
               (car lat)
               (rempick
                  (sub1 n)
                  (cdr lat)
               )
            )
         )
      )
   )
)

(rempick 3 '(hotdogs with hot mustard))

(define no-nums
   (lambda
      (lat)
      (cond
         (  (null? lat)
            (quote ())
         )
         (  (number? (car lat))
            (no-nums (cdr lat))
         )
         (else
            (cons
               (car lat)
               (no-nums (cdr lat))
            )
         )
      )
   )
)

(no-nums '(5 pears 6 prunes 9 dates))

(define all-nums
   (lambda
      (lat)
      (cond
         (  (null? lat)
            (quote ())
         )
         (  (number? (car lat))
            (cons
               (car lat)
               (all-nums (cdr lat))
            )
         )
         (else (all-nums (cdr lat)))
      )
   )
)

(all-nums '(5 pears 6 prunes 9 dates))

(define eqan?
   (lambda
      (a b)
      (cond
         (  (and
               (number? a)
               (number? b)
            )
            (eq a b)
         )
         (  (or
               (number? a)
               (number? b)
            )
            #f
         )
         (else (eq? a b))
      )
   )
)

(eqan? 3 5)

(eqan? 10 10)

(eqan? 'a 7)

(eqan? 'c 'c)

(eqan? 'b 'd)

(define occur
   (lambda
      (a lat)
      (cond
         (  (null? lat) 0)
         (  (eqan? a (car lat))
            (add1 (occur a (cdr lat)))
         )
         (else (occur a (cdr lat)))
      )
   )
)

(occur 'cup '(coffee cup tea cup and hick cup))

(occur 'd '(a b a c a b))

(occur 3 '(3.0 1 3 3 7))

(define atom?
   (lambda
      (x)
      (not
         (or
            (pair? x)
            (null? x)
         )
      )
   )
)

(define occur*
   (lambda
      (a l)
      (cond
         (  (null? l) 0)
         (  (not (atom? (car l)))
            (o+
               (occur* a (car l))
               (occur* a (cdr l))
            )
         )
         (  (eqan? a (car l))
            (add1 (occur* a (cdr l)))
         )
         (else (occur* a (cdr l)))
      )
   )
)

(occur* 'banana '((banana) (split ((((banana ice))) (cream (banana)) sherbet)) (banana) (bread) (banana brandy)))

(define one?
   (lambda
      (num)
      (cond
         (  (zero? num) #f)
         (else (zero? (sub1 num)))
      )
   )
)

(one? 1)

(one? 1.0)

(one? 0.5)

(one? 10)

(one? 0)

(define rempick
   (lambda
      (n lat)
      (cond
         (  (null? lat)
            (quote ())
         )
         (  (one? n)
            (cdr lat)
         )
         (else
            (cons
               (car lat)
               (rempick
                  (sub1 n)
                  (cdr lat)
               )
            )
         )
      )
   )
)

(rempick 3 '(lemon meringue salty pie))
