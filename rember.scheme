(load "common.scheme")

;(define rember 
;   (lambda      
;      (a lat)
;      (cond
;         (  (null? lat)
;            (quote ())
;         )
;         (  (eq? a (car lat))
;            (cdr lat)
;         )
;         (else
;            (cons
;               (car lat)
;               (rember a (cdr lat))
;            )
;         )
;      )
;   )
;)

(define rember 
   (lambda      
      (s l)
      (cond
         (  (null? l)
            (quote ())
         )
         (  (equal? s (car l))
            (cdr l)
         )
         (else
            (cons
               (car l)
               (rember s (cdr l))
            )
         )
      )
   )
)

(rember 'mint '(lamb chops and mint jelly))

(rember 'mint '(lamb chops and mint flavored mint jelly))

(rember 'toast '(bacon lettuce and tomato))

(rember 'cup '(coffee cup tea cup and hick cup))

(rember 'bacon '(bacon lettuce and tomato))

(rember 'and '(bacon lettuce and tomato))

(rember 'sauce '(soy sauce and tomato sauce))

(rember 'a '(a b a c a b))

(rember 'b '(a b a c a b))

(rember 'c '(a b a c a b))

(rember 'd '(a b a c a b))

(define rember*
   (lambda
      (a l)
      (cond
         (  (null? l)
            (quote ())
         )
         (  (notatom?car l)
            (cons
               (rember* a (car l))
               (rember* a (cdr l))
            )
         )
         (  (eq?     a (car l))
            (rember* a (cdr l))
         )
         (else
            (cons
               (car l)
               (rember* a (cdr l))
            )
         )
      )
   )
)

(rember* 'cup '((coffee) cup ((tea) cup) (and (hick)) cup))

(rember* 'mint '(lamb chops and mint jelly))

(rember* 'mint '(lamb chops and mint flavored mint jelly))

(rember* 'toast '(bacon lettuce and tomato))

(rember* 'cup '(coffee cup tea cup and hick cup))

(rember* 'bacon '(bacon lettuce and tomato))

(rember* 'and '(bacon lettuce and tomato))

(rember* 'sauce '(soy sauce and tomato sauce))

(rember* 'a '(a b a c a b))

(rember* 'b '(a b a c a b))

(rember* 'c '(a b a c a b))

(rember* 'd '(a b a c a b))

(define rember-f
   (lambda
      (test? a l)
      (cond
         (  (null? l)
            (quote ())
         )
         (  (test? a (car l))
            (cdr l)
         )
         (else
            (cons
               (car l)
               (rember-f test? a (cdr l))
            )
         )
      )
   )
)

(rember-f eq? 'jelly '(jelly beans are good))

(rember-f equal? '(pop corn) '(lemonade (pop corn) and (cake)))
