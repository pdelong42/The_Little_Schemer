(load "common.scheme")

; just here for convenience - delete when done
;(define equal?
;   (lambda
;      (a b)
;      (cond
;         (  (eqan? a b) #t)
;         (else (eqlist? a b))
;      )
;   )
;)

(define eqlist?
   (lambda
      (a b)
      (cond
         (  (and
               (null? a)
               (null? b)
            )
            #t
         )
         (  (or
               (null? a)
               (null? b)
            )
            #f
         )
         (  (and
               (pair? (car a))
               (pair? (car b))
            )
            (and
               (eqlist?
                  (car a)
                  (car b)
               )
               (eqlist?
                  (cdr a)
                  (cdr b)
               )
            )
         )
         (  (or
               (pair? (car a))
               (pair? (car b))
            )
            #f
         )
         (else
            (and
               (eqan?
                  (car a)
                  (car b)
               )
               (eqlist?
                  (cdr a)
                  (cdr b)
               )
            )
         )
      )
   )
)

(eqlist? '(strawberry ice cream) '(strawberry ice cream))

(eqlist? '(strawberry ice cream) '(strawberry cream ice))

(eqlist? '(banana ((split))) '((banana) (split)))

(eqlist? '(beef ((sausage)) (and (soda))) '(beef ((salami)) (and (soda))))

(eqlist? '(beef ((sausage)) (and (soda))) '(beef ((sausage)) (and (soda))))
