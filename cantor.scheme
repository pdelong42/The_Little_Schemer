(load "common.scheme")

(define set?
   (lambda
      (s)
      (cond
         (  (null? s) #t)
         (  (atom? s) #f)
         (  (member?
               (car s)
               (cdr s)
            )
            #f
         )
         (else (set? (cdr s)))
      )
   )
)

(define makeset
   (lambda
      (s)
      (cond
         (  (null? s)
            (quote ())
         )
         (else
            (cons
               (car s)
               (multirember
                  (car s)
                  (makeset (cdr s))
               )
            )
         )
      )
   )
)

(makeset '(apple peach pear peach plum apple lemon peach))

(makeset '(apple 3 pear 4 9 apple 3 4))

(define subset?
   (lambda
      (s1 s2)
      (cond
         (  (null? s1) #t)
         (else
            (and
               (member? (car s1) s2)
               (subset? (cdr s1) s2)
            )
         )
      )
   )
)

(subset? '() '())

(subset? '(a) '())

(subset? '() '(b))

(subset? '(a) '(b))

(subset? '(a) '(a))

(subset? '(5 chicken wings) '(5 hamburgers 2 pieces fried chicken and light duckling wings))

(subset? '(4 pounds of horseradish) '(four pounds chicken and 5 ounces horseradish))

(define eqset?
   (lambda
      (s1 s2)
      (and
         (subset? s1 s2)
         (subset? s2 s1)
      )
   )
)

(eqset? '() '())

(eqset? '(a) '(b))

(eqset? '(a) '(a))

(eqset? '() '(a))

(eqset? '(a) '(a b))

(eqset? '(6 large chickens with wings) '(6 chickens with large wings))

(define intersect?
   (lambda
      (s1 s2)
      (cond
         (  (null? s1) #f)
         (else
            (or
               (member?    (car s1) s2)
               (intersect? (cdr s1) s2)
            )
         )
      )
   )
)

(intersect? '() '())

(intersect? '(a) '(b))

(intersect? '(a) '(a))

(intersect? '(a b) '(a c))

(intersect? '(stewed tomatoes and macaroni) '(macaroni and cheese))

(intersect? '(stewed tomatoes or potatoes) '(macaroni and cheese))

(define intersect
   (lambda
      (s1 s2)
      (cond
         (  (null? s1)
            (quote ())
         )
         (  (member? (car s1) s2)
            (makeset
               (cons
                  (car s1)
                  (intersect (cdr s1) s2)
               )
            )
         )
         (else (intersect (cdr s1) s2))
      )
   )
)

(intersect '(stewed tomatoes and macaroni) '(macaroni and cheese))

;(define union
;   (lambda
;      (s1 s2)
;      (cond
;      )
;   )
;)
