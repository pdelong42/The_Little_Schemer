(load "common.scheme")

(define set?
   (lambda
      (s)
      (cond
         (  (null? s) #t)
         (  (atom? s) #f)
         (  (member?
               (car s)
               (cdr s)
            )
            #f
         )
         (else (set? (cdr s)))
      )
   )
)

(define makeset
   (lambda
      (s)
      (cond
         (  (null? s)
            (quote ())
         )
         (else
            (cons
               (car s)
               (multirember
                  (car s)
                  (makeset (cdr s))
               )
            )
         )
      )
   )
)

(makeset '(apple peach pear peach plum apple lemon peach))

(makeset '(apple 3 pear 4 9 apple 3 4))

(define subset?
   (lambda
      (s1 s2)
      ...
   )
)
