(load "common.scheme")

(define set?
   (lambda
      (s)
      (cond
         (  (null? s) #t)
         (  (atom? s) #f)
         (  (member?
               (car s)
               (cdr s)
            )
            #f
         )
         (else (set? (cdr s)))
      )
   )
)

(define makeset
   (lambda
      (s)
      (cond
         (  (null? s)
            (quote ())
         )
         (else
            (cons
               (car s)
               (multirember
                  (car s)
                  (makeset (cdr s))
               )
            )
         )
      )
   )
)

(makeset '(apple peach pear peach plum apple lemon peach))

(makeset '(apple 3 pear 4 9 apple 3 4))

(define subset?
   (lambda
      (s1 s2)
      (cond
         (  (null? s1) #t)
         (else
            (and
               (member? (car s1) s2)
               (subset? (cdr s1) s2)
            )
         )
      )
   )
)

(subset? '() '())

(subset? '(a) '())

(subset? '() '(b))

(subset? '(a) '(b))

(subset? '(a) '(a))

(subset? '(5 chicken wings) '(5 hamburgers 2 pieces fried chicken and light duckling wings))

(subset? '(4 pounds of horseradish) '(four pounds chicken and 5 ounces horseradish))

(define eqset?
   (lambda
      (s1 s2)
      (and
         (subset? s1 s2)
         (subset? s2 s1)
      )
   )
)

(eqset? '() '())

(eqset? '(a) '(b))

(eqset? '(a) '(a))

(eqset? '() '(a))

(eqset? '(a) '(a b))

(eqset? '(6 large chickens with wings) '(6 chickens with large wings))

(define intersect?
   (lambda
      (s1 s2)
      (cond
         (  (null? s1) #f)
         (else
            (or
               (member?    (car s1) s2)
               (intersect? (cdr s1) s2)
            )
         )
      )
   )
)

(intersect? '() '())

(intersect? '(a) '(b))

(intersect? '(a) '(a))

(intersect? '(a b) '(a c))

(intersect? '(stewed tomatoes and macaroni) '(macaroni and cheese))

(intersect? '(stewed tomatoes or potatoes) '(macaroni and cheese))

(define intersect
   (lambda
      (s1 s2)
      (cond
         (  (null? s1)
            (quote ())
         )
         (  (member? (car s1) s2)
            (cons
               (car s1)
               (intersect (cdr s1) s2)
            )
         )
         (else (intersect (cdr s1) s2))
      )
   )
)

(intersect '() '())

(intersect '(a b c) '(d e f))

(intersect '(a b c d) '(c d e f))

(intersect '(stewed tomatoes and macaroni) '(macaroni and cheese))

(define union
   (lambda
      (s1 s2)
      (cond
         (  (null? s1) s2)
         (  (member? (car s1) s2)
            (union   (cdr s1) s2)
         )
         (else
            (cons
               (car s1)
               (union (cdr s1) s2)
            )
         )
      )
   )
)

(union '() '())

(union '(a b c) '(d e f))

(union '(a b c d) '(c d e f))

(union '(stewed tomatoes and macaroni casserole) '(macaroni and cheese))

(define differ
   (lambda
      (s1 s2)
      (cond
         (  (null? s1)
            (quote ())
         )
         (  (member? (car s1) s2)
            (differ  (cdr s1) s2)
         )
         (else
            (cons
               (car s1)
               (differ (cdr s1) s2)
            )
         )
      )
   )
)

(differ '(stewed tomatoes and macaroni casserole) '(macaroni and cheese))

(define intersectall
   (lambda
      (ls)
      (cond
         (  (null? (cdr ls))
            (car ls)
         )
         (else
            (intersect
               (car ls)
               (intersectall (cdr ls))
            )
         )
      )
   )
)

(intersectall '((a b c) (c a d e) (e f g h a b)))

(define a-pair?
   (lambda
      (x)
      (cond
         (  (atom? x) #f)
         (  (null? x) #f)
         (  (null? (cdr x)) #f)
         (  (null? (cdr (cdr x))) #t)
         (else #f)
      )
   )
)

(a-pair? '(pear pear))

(a-pair? '(3 7))

(a-pair? '((2) (pair)))

(a-pair? '(full (house)))

(a-pair? 'a)

(a-pair? '())

(a-pair? '(a))

(a-pair? '(a b c))

(a-pair? '(() x))

(define first
   (lambda
      (p)
      (car p)
   )
)

(first '(a))

(first '(a b c))

(define second
   (lambda
      (p)
      (car (cdr p)))
   )
)

(second '(a b c))

(define third
   (lambda
      (p)
      (car (cdr (cdr p)))
   )
)

(third '(a b c))

(define build
   (lambda
      (s1 s2)
      (cons s1 (cons s2 (quote ())))
   )
)

(build 'a 'b)

(build 'a ())

(define fun?
   (lambda
      (x)
       (set? (firsts x))
   )
)

(fun? '((4 3) (4 2) (7 6) (6 2) (3 4)))

(fun? '((8 3) (4 2) (7 6) (6 2) (3 4)))

(fun? '((d 4) (b 0) (b 9) (e 5) (g 4)))
